{"ast":null,"code":"var _jsxFileName = \"/Users/shrooqsaleh/Desktop/clinic/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: 'system',\n    content: `\n    first you should say send an article. don't say anything else\n    You will classify the Sentiment of the article and word .\n    there is only four type of Sentiment:\n    Fear\n    Anger\n    Joy\n    Sad\n    and also the Positive ratio out of 5 and and negative out of 5 .\n    if the user ask anything else say sorry i can only analyze the articles and words.\n    Do not write explanations.\n    Don't ask him if he need any help. you are an analyst\n    `\n  }, {\n    role: 'assistant',\n    content: 'content: I am ready to be an analyst. '\n  }]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const handleChange = event => {\n    setCurrentMessage(event.target.value);\n  };\n  console.log(\"messages1>>>>>>\");\n  console.log(messages);\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"messages2>>>>>>\");\n    console.log(messages);\n    setMessages([...messages, {\n      role: \"user\",\n      content: currentMessage\n    }]);\n    setCurrentMessage(\"\");\n    // Add logic here to process the user's message and generate a response\n    sendMessageToChatGPT();\n  };\n  async function sendMessageToChatGPT() {\n    const configuration = new Configuration({\n      apiKey: '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'\n    });\n    const openai = new OpenAIApi(configuration);\n    console.log(\"messages3>>>>>>\");\n    console.log(messages);\n    const completion = await openai.createChatCompletion({\n      model: 'gpt-3.5-turbo',\n      messages: messages,\n      temperature: 0,\n      max_tokens: 100\n    });\n    console.log(completion.data.choices[0].message);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.role = \"user\" ? \"chatbot-bot-message\" : \"chatbot-bot-message\",\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chatbot-input-container\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chatbot-input\",\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: currentMessage,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatbot-send-button\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"waMqDA6T1H7S5eaiW9yRbhm1HE0=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Configuration","OpenAIApi","require","Chatbot","_s","messages","setMessages","role","content","currentMessage","setCurrentMessage","handleChange","event","target","value","console","log","handleSubmit","preventDefault","sendMessageToChatGPT","configuration","apiKey","openai","completion","createChatCompletion","model","temperature","max_tokens","data","choices","message","className","children","map","index","text","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["/Users/shrooqsaleh/Desktop/clinic/src/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nconst { Configuration, OpenAIApi } = require('openai');\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([{\n    role: 'system',\n    content: `\n    first you should say send an article. don't say anything else\n    You will classify the Sentiment of the article and word .\n    there is only four type of Sentiment:\n    Fear\n    Anger\n    Joy\n    Sad\n    and also the Positive ratio out of 5 and and negative out of 5 .\n    if the user ask anything else say sorry i can only analyze the articles and words.\n    Do not write explanations.\n    Don't ask him if he need any help. you are an analyst\n    `,\n},\n{\n    role: 'assistant',\n    content: 'content: I am ready to be an analyst. ',\n}]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  \n  const handleChange = (event) => {\n    setCurrentMessage(event.target.value);\n  };\n  console.log(\"messages1>>>>>>\");\n  console.log(messages);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"messages2>>>>>>\");\n    console.log(messages);\n    setMessages([...messages, { role: \"user\", content: currentMessage }]);\n    setCurrentMessage(\"\");\n    // Add logic here to process the user's message and generate a response\n    sendMessageToChatGPT()\n  };\n  async function sendMessageToChatGPT() {\n\tconst configuration = new Configuration({\n\t\tapiKey: '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',\n\t});\n\tconst openai = new OpenAIApi(configuration);\n\n    console.log(\"messages3>>>>>>\");\n    console.log(messages);\n\tconst completion = await openai.createChatCompletion({\n\t\tmodel: 'gpt-3.5-turbo',\n\t\tmessages: messages,\n\t\ttemperature: 0,\n\t\tmax_tokens: 100,\n\t});\n\tconsole.log(completion.data.choices[0].message);\n}\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chatbot-messages\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={message.role=\"user\" ? \"chatbot-bot-message\" : \"chatbot-bot-message\"}\n          >\n            {message.text}\n          </div>\n        ))}\n      </div>\n      <form className=\"chatbot-input-container\" onSubmit={handleSubmit}>\n        <input\n          className=\"chatbot-input\"\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={currentMessage}\n          onChange={handleChange}\n        />\n        <button className=\"chatbot-send-button\" type=\"submit\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}