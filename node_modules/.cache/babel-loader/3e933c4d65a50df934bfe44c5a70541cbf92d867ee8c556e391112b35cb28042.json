{"ast":null,"code":"var _jsxFileName = \"/Users/shrooqsaleh/Desktop/clinic/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Configuration,\n  OpenAIApi\n} = require('openai');\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const handleChange = event => {\n    setCurrentMessage(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    setMessages([...messages, {\n      text: currentMessage,\n      isUser: true\n    }]);\n    setCurrentMessage(\"\");\n    // Add logic here to process the user's message and generate a response\n    setMessages([...messages, {\n      text: currentMessage,\n      isUser: true\n    }]);\n    // sendMessageToChatGPT(currentMessage,)\n  };\n\n  async function myCode(message, chat_messages) {\n    const configuration = new Configuration({\n      apiKey: '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'\n    });\n    const openai = new OpenAIApi(configuration);\n    const completion = await openai.createChatCompletion({\n      model: 'gpt-3.5-turbo',\n      messages: chat_messages + message,\n      temperature: 0,\n      max_tokens: 100\n    });\n    console.log(completion.data.choices[0].message);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.isUser ? \"chatbot-user-message\" : \"chatbot-bot-message\",\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chatbot-input-container\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chatbot-input\",\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: currentMessage,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatbot-send-button\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Rb9fRLD1PruS4iXNKXdPLlbwo0E=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Configuration","OpenAIApi","require","Chatbot","_s","messages","setMessages","currentMessage","setCurrentMessage","handleChange","event","target","value","handleSubmit","preventDefault","text","isUser","myCode","message","chat_messages","configuration","apiKey","openai","completion","createChatCompletion","model","temperature","max_tokens","console","log","data","choices","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["/Users/shrooqsaleh/Desktop/clinic/src/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nconst { Configuration, OpenAIApi } = require('openai');\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n\n  const handleChange = (event) => {\n    setCurrentMessage(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setMessages([...messages, { text: currentMessage, isUser: true }]);\n    setCurrentMessage(\"\");\n    // Add logic here to process the user's message and generate a response\n    setMessages([...messages, { text: currentMessage, isUser: true }]);\n    // sendMessageToChatGPT(currentMessage,)\n  };\n  async function myCode(message, chat_messages) {\n\tconst configuration = new Configuration({\n\t\tapiKey: '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',\n\t});\n\tconst openai = new OpenAIApi(configuration);\n\n\tconst completion = await openai.createChatCompletion({\n\t\tmodel: 'gpt-3.5-turbo',\n\t\tmessages: chat_messages + message,\n\t\ttemperature: 0,\n\t\tmax_tokens: 100,\n\t});\n\tconsole.log(completion.data.choices[0].message);\n}\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chatbot-messages\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={message.isUser ? \"chatbot-user-message\" : \"chatbot-bot-message\"}\n          >\n            {message.text}\n          </div>\n        ))}\n      </div>\n      <form className=\"chatbot-input-container\" onSubmit={handleSubmit}>\n        <input\n          className=\"chatbot-input\"\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={currentMessage}\n          onChange={handleChange}\n        />\n        <button className=\"chatbot-send-button\" type=\"submit\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}